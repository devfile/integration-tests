schemaVersion: 2.0.0
metadata:
  name: nodejs
starterProjects:
  - name: nodejs-starter
    git:
      remotes:
        origin: "https://github.com/odo-devfiles/nodejs-ex.git"
components:
  - name: runtime
    container:
      image: registry.access.redhat.com/ubi8/nodejs-12:1-36
      memoryLimit: 1024Mi
      endpoints:
        - name: "3000-tcp"
          targetPort: 3000
      mountSources: true
commands:
  - id: firstbuild
    exec:
      component: runtime
      commandLine: npm install
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: build
        isDefault: true
  - id: secondbuild
    exec:
      component: runtime
      commandLine: npm install
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: build
  - id: thirdbuild
    exec:
      component: runtime
      commandLine: npm install
      workingDir: ${PROJECTS_ROOT}
  - id: buildwithenv
    exec:
      component: runtime
      commandLine: npm install && mkdir $BUILD_ENV1
      workingDir: ${PROJECTS_ROOT}
      env:
        - name: BUILD_ENV1
          value: "test_build_env_variable"
  - id: buildwithmultipleenv
    exec:
      component: runtime
      commandLine: "sh -c 'mkdir $BUILD_ENV1 $BUILD_ENV2' && npm install"
      workingDir: ${PROJECTS_ROOT}
      env:
        - name: BUILD_ENV1
          value: "test_build_env_variable1"
        - name: BUILD_ENV2
          value: "test_build_env_variable2"
  - id: buildenvwithspace
    exec:
      component: runtime
      commandLine: npm install && mkdir "$BUILD_ENV1"
      workingDir: ${PROJECTS_ROOT}
      env:
        - name: BUILD_ENV1
          value: "build env variable with space"
  - id: firstrun
    exec:
      component: runtime
      commandLine: npm start
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: run
        isDefault: true
  - id: secondrun
    exec:
      component: runtime
      commandLine: npm start
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: run
  - id: singleenv
    exec:
      component: runtime
      commandLine: mkdir $ENV1
      env:
       - name: ENV1
         value: "test_env_variable"
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: run
  - id: multipleenv
    exec:
      component: runtime
      commandLine: "sh -c 'mkdir $ENV1 $ENV2'"
      env:
       - name: ENV1
         value: "test_env_variable1"
       - name: ENV2
         value: "test_env_variable2"
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: run
  - id: envwithspace
    exec:
      component: runtime
      commandLine: mkdir "$ENV1"
      env:
       - name: ENV1
         value: "env with space"
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: run
  - id: test1
    exec:
      component: runtime
      commandLine: "mkdir test1"
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: test
        isDefault: true
  - id: test2
    exec:
      component: runtime
      commandLine: "mkdir test2"
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: test
        isDefault: true
